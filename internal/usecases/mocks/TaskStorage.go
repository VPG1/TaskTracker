// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	entities "TaskTracker/internal/entities"

	mock "github.com/stretchr/testify/mock"
)

// TaskStorage is an autogenerated mock type for the TaskStorage type
type TaskStorage struct {
	mock.Mock
}

// GetFreeId provides a mock function with given fields:
func (_m *TaskStorage) GetFreeId() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFreeId")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveTask provides a mock function with given fields: e
func (_m *TaskStorage) SaveTask(e *entities.Task) error {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for SaveTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Task) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTaskStorage creates a new instance of TaskStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskStorage {
	mock := &TaskStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
